#version 330

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 textCoord;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

// Output interface block
out VS_OUT
{
	vec3 FragPos;
	vec2 TextCoord;
	vec3 FragNormal;
	vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
}vs_out;


uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
// For conversion to TBN space
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	vs_out.FragPos = vec3(model * vec4(position, 1.0)); // Location of the fragment in the world coordinate system
	vs_out.TextCoord = textCoord;

	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vs_out.FragNormal = normalMatrix * normal; // Calculate the value of the normal vector after model transformation
	// TBN matrix vector in the world coordinate system
    vec3 T = normalize(normalMatrix * tangent);
    vec3 B = normalize(normalMatrix * bitangent);
    vec3 N = normalize(normalMatrix * normal);    
    
	// Convert coordinates in world coord system to TBN coord system
    mat3 TBN = transpose(mat3(T, B, N));  
    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;

	vs_out.FragNormal = TBN * vs_out.FragNormal; // Convert normal vector to TBN coord system
}